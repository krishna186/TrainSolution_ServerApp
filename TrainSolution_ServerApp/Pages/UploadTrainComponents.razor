@page "/uploadcomponents"
@using TrainSolution_ServerApp.Models
@inject NavigationManager Navigation
@inject TrainComponentManagement TrainComponentManagement
@using System.Globalization
@using Microsoft.AspNetCore.Components.Forms

<div class="upload-container">
    <h3 class="mb-4 text-center">Upload CSV File</h3>

    <div class="mb-3">
        <InputFile OnChange="HandleFileSelected" class="form-control file-input" />
    </div>

    <button class="btn btn-primary mb-3" @onclick="UploadCSVFile" disabled="@(selectedFile == null)">
        Upload CSV
    </button>

    @if (selectedFile != null)
    {
        <div class="mb-3">
            <strong>Selected file:</strong> @selectedFile.Name
        </div>
    }

    @if (errorMessages.Any())
    {
        <div class="alert alert-danger mt-3">
            <h5>Errors:</h5>
            <ul>
                @foreach (var error in errorMessages)
                {
                    <li>@error</li>
                }
            </ul>
        </div>
    }
</div>

<style>
    .upload-container {
        max-width: 480px;
        margin: 2rem auto;
        padding: 1.5rem 2rem;
        border: 1px solid #dee2e6;
        border-radius: 0.5rem;
        background-color: #fefefe;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }

    h3 {
        color: #343a40;
        font-weight: 700;
    }

    .file-input {
        cursor: pointer;
    }

    button.btn-primary {
        width: 100%;
        font-weight: 600;
        font-size: 1rem;
        border-radius: 0.375rem;
        transition: background-color 0.3s ease;
    }

        button.btn-primary:disabled {
            background-color: #6c757d;
            border-color: #6c757d;
            cursor: not-allowed;
        }

    .alert {
        font-size: 0.9rem;
    }

    ul {
        margin-bottom: 0;
    }
</style>

@code {
    private IBrowserFile? selectedFile;
    private List<string> errorMessages = new();

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        errorMessages.Clear();
    }

    private async Task UploadCSVFile()
    {
        errorMessages.Clear();

        if (selectedFile == null)
        {
            errorMessages.Add("Please select a file.");
            return;
        }
        try
        {
            using var reader = new StreamReader(selectedFile.OpenReadStream(maxAllowedSize: 10000000));
            string? line;
            int lineNumber = 0;

            var dateFormats = new[] { "dd/MM/yyyy", "d/M/yyyy", "dd-MM-yyyy" }; //Validating date with given 3 date formats 

            while ((line = await reader.ReadLineAsync()) != null)
            {
                lineNumber++;
                if (lineNumber == 1)
                    continue; // Ignore header

                var fields = line.Split(',');

                if (fields.Length != 4) // Validating Columns
                {
                    errorMessages.Add($"Line {lineNumber}: Not enough fields.");
                    continue;
                }

                string serialnum = fields[0].Trim();
                string description = fields[1].Trim();
                string vehicle = fields[2].Trim();
                string dateStr = fields[3].Trim();

                if (!DateTime.TryParseExact(dateStr, dateFormats, CultureInfo.InvariantCulture, DateTimeStyles.None, out var installDate))
                {
                    errorMessages.Add($"Line {lineNumber}: Invalid date format '{dateStr}'.");
                    continue;
                }

                var component = new TrainComponents
                    {
                        SerialNumber = serialnum,
                        Description = description,
                        VehicleNumber = vehicle,
                        InstallDate = installDate
                    };

                try
                {
                    await TrainComponentManagement.AddComponent(component);
                }
                catch (Exception ex)
                {
                    errorMessages.Add($"Line {lineNumber}: {ex.Message}");
                }
            }
        }
        catch (Exception ex)
        {
            errorMessages.Add($"General error: {ex.Message}");
        }
    }
}
