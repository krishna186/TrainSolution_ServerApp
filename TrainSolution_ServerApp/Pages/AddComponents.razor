@page "/AddComponents/{Id:int?}"
@using Microsoft.AspNetCore.Components.Forms
@using TrainSolution_ServerApp.Models
@inject TrainComponentManagement TrainComponentManagement
@inject NavigationManager Navigation

<h3 class="mt-4">@((Id == null) ? "Add New Component" : "Edit Component")</h3>

<EditForm Model="Objcomponent" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label class="form-label">Serial Number</label>
        <InputText class="form-control" @bind-Value="Objcomponent.SerialNumber" />
    </div>

    <div class="mb-3">
        <label class="form-label">Description</label>
        <InputText class="form-control" @bind-Value="Objcomponent.Description" />
    </div>

    <div class="mb-3">
        <label class="form-label">Vehicle Number</label>
        <select class="form-select" @bind="Objcomponent.VehicleNumber">
            <option value="">-- Select Vehicle Number --</option>
            @foreach (var item in vehicleNumbers)
            {
                <option value="@item">@item</option>
            }
        </select>
    </div>

    <div class="mb-3">
        <label class="form-label">Install Date</label>
        <InputDate class="form-control" @bind-Value="Objcomponent.InstallDate" />
    </div>

    <div class="d-flex justify-content-between">
        <button type="submit" class="btn btn-success">@((Id == null) ? "Add" : "Update")</button>
        <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
    </div>
</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }

    private TrainComponents Objcomponent = new TrainComponents();
    private List<string> vehicleNumbers = new();
    protected override async Task OnInitializedAsync()
    {
        vehicleNumbers = await TrainComponentManagement.GetAllVehicleNumbers();
        if (Id != null)
        {
            var GetComponnetbyId = await TrainComponentManagement.GetComponentById(Id.Value);
            if (GetComponnetbyId != null)
            {
                Objcomponent = GetComponnetbyId;
            }
            else
            {
                Navigation.NavigateTo("/componentsview");
            }
        }      
    }

    private async Task HandleValidSubmit()
    {
        if (Id == null)
        {
            await TrainComponentManagement.AddComponent(Objcomponent);
        }
        else
        {
            await TrainComponentManagement.UpdateComponent(Objcomponent);
        }

        Navigation.NavigateTo("/componentsview");
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/componentsview");
    }
}